
DAC_Side.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000132  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e2  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000130  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000186  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000041  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void) {
    DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	bool inc = true;
  84:	81 e0       	ldi	r24, 0x01	; 1
		if(inc){
			PORTD++;
			if(PORTD==0xFF) inc = !inc;
		}else{
			PORTD--;
			if(PORTD==0) inc = !inc;	
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
int main(void) {
    DDRD = 0xFF;
	bool inc = true;
	
	while(1) {
		if(inc){
  8a:	88 23       	and	r24, r24
  8c:	49 f0       	breq	.+18     	; 0xa0 <main+0x20>
			PORTD++;
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	8b b9       	out	0x0b, r24	; 11
			if(PORTD==0xFF) inc = !inc;
  94:	2b b1       	in	r18, 0x0b	; 11
  96:	89 2f       	mov	r24, r25
  98:	2f 3f       	cpi	r18, 0xFF	; 255
  9a:	49 f4       	brne	.+18     	; 0xae <main+0x2e>
  9c:	83 2f       	mov	r24, r19
  9e:	07 c0       	rjmp	.+14     	; 0xae <main+0x2e>
		}else{
			PORTD--;
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	81 50       	subi	r24, 0x01	; 1
  a4:	8b b9       	out	0x0b, r24	; 11
			if(PORTD==0) inc = !inc;	
  a6:	2b b1       	in	r18, 0x0b	; 11
  a8:	89 2f       	mov	r24, r25
  aa:	21 11       	cpse	r18, r1
  ac:	83 2f       	mov	r24, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	e7 ec       	ldi	r30, 0xC7	; 199
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x32>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
  ba:	e7 cf       	rjmp	.-50     	; 0x8a <main+0xa>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
